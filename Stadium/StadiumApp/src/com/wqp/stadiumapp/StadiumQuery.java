package com.wqp.stadiumapp;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
 

import android.app.ProgressDialog;
import android.content.Intent; 
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Toast;

import com.wqp.stadiumapp.adapter.StadiumQueryListViewAdapter;
import com.wqp.stadiumapp.utils.CommonSlidMenu;
import com.wqp.stadiumapp.utils.WebServiceUtils;
import com.wqp.view.XListView;
import com.wqp.view.XListView.IXListViewListener;
import com.wqp.webservice.WebGetVenues;
import com.wqp.webservice.entity.GetVenuesInfoBean;

public class StadiumQuery extends Fragment implements View.OnClickListener,IXListViewListener{
	private static String TAG="StadiumQuery"; 
	private StringBuilder sql=new StringBuilder();
	private ImageView stadium_query_back_arrow;
	private Button stadium_query_button;
	private EditText stadium_query_searchbox_content;
	private XListView stadium_query_listview;
	private List<Map<String,Object>> mListViewData;
	private View mListViewHeader;//这个视图是listview头部搜索框
	private StadiumQueryListViewAdapter mStadiumQueryListViewAdapter;
	private ProgressDialog mProgressDialog;//进度对话框
	
	private List<GetVenuesInfoBean> WebDataSet=null;
	private int WebDataSetCount=0;//存储查询到的数据集总长度
	private int mTotalPage=0;//根据数据总长度需要几页显示数据 
	private int current=0;//当前页,默认为第一页  mTotalPage - currentIndex 
	private int TEN=10;//默认每页显示的数据长度
	
	
	/** 定义消息管理器*/
	private Handler mHandler=new Handler(){
		@SuppressWarnings("unchecked")
		public void handleMessage(android.os.Message msg) {
			switch (msg.what) {
			case 0x11://从线程中查询的数据集返回此处 
				WebDataSet=(List<GetVenuesInfoBean>) msg.obj; 
				WebDataSetCount=WebDataSet.size();//设置返回数据集的总长度
				mTotalPage=WebDataSetCount%10==0 ? WebDataSetCount/10 : WebDataSetCount/10+1;//计算需要分几页显示数据 
				mListViewData.clear();//清空数据缓存
				current=0;//重新把当前页面设置为默认值0
				getListViewData();//添加数据 
				mStadiumQueryListViewAdapter.notifyDataSetChanged();//更新ListView适配器的数据  
				break;
			case 0x22://标识获取到的数据为空 
				Toast.makeText(getActivity(), "没有找到哦!", 0).show();
			case 0x33://标识上拉加载时已经没有数据了
				Toast.makeText(getActivity(), "亲,没有了哦!", 0).show();	
			default:
				break;
			} 
		};
	};
	 
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		View view=inflater.inflate(R.layout.stadium_query, container,false);
		initView(view);//对页面组件进行初始化 
		initListView();//对listView填充数据操作
		
		return view;
	}
	
	/** 为返回按钮绑定事件 */
	private void initView(View view){
		stadium_query_back_arrow=(ImageView) view.findViewById(R.id.stadium_query_back_arrow); 
		stadium_query_listview=(XListView) view.findViewById(R.id.stadium_query_listview);
		
		//为Xlistview添加头部搜索框
		mListViewHeader=LayoutInflater.from(getActivity()).inflate(R.layout.stadium_searchbox, null);
		stadium_query_button=(Button) mListViewHeader.findViewById(R.id.stadium_searchbox_button);
		stadium_query_searchbox_content=(EditText) mListViewHeader.findViewById(R.id.stadium_searchbox_content);
		stadium_query_listview.addHeaderView(mListViewHeader);
		
		//为XListView绑定上拉刷新事件,并进行配置
		stadium_query_listview.setPullLoadEnable(true);
		stadium_query_listview.setPullRefreshEnable(false);
		stadium_query_listview.toggleHeadView=true;//不使用头部刷新功能 
		
		//为返回和查询按钮绑定事件
		stadium_query_back_arrow.setOnClickListener(this);  
		stadium_query_button.setOnClickListener(this); 
	}
	
	/** 对listview填充数据操作 */
	private void initListView(){  
		//为listview填充适配器
		mListViewData=new ArrayList<Map<String,Object>>(); 
		
		mStadiumQueryListViewAdapter=new StadiumQueryListViewAdapter(
				getActivity(),
				getListViewData(),
				R.layout.stadium_query_listview_item,
				new String[]{"VenuesImager","VenuesName","Address","ReservePhone","RideRoute","VenuesEnvironment"},
				new int[]{R.id.stadium_query_listview_image,
						  R.id.stadium_query_listview_title,
						  R.id.stadium_query_listview_address,
						  R.id.stadium_query_listview_telephone,
						  R.id.stadium_query_listview_route,
						  R.id.stadium_query_listview_environment});
		
		stadium_query_listview.setAdapter(mStadiumQueryListViewAdapter);
		stadium_query_listview.setXListViewListener(this);//设置滚动监听
		
		//为listview绑定点击事件
		stadium_query_listview.setOnItemClickListener(new OnItemClickListener() { 
			@Override
			public void onItemClick(AdapterView<?> parent, View view, int position, long id) { 
//				Toast.makeText(getActivity(), WebDataSet.get(position-2).getVenuesname()+"", 0).show(); 
				Intent intent=new Intent(getActivity(),StadiumSpecify.class);
				Bundle extras=new Bundle();
				extras.putSerializable("VenuesInfo", WebDataSet.get(position-2));
				intent.putExtras(extras);
				getActivity().startActivity(intent);//跳转到场馆详情界面
			}
		});
		
	}

	@Override
	public void onClick(View v) {
		switch(v.getId()){
		case R.id.stadium_query_back_arrow://为返回按钮绑定事件
			CommonSlidMenu.mSlidMenu.toggle();//侧边菜单出现
			break;
		case R.id.stadium_searchbox_button://查询按钮旁边的输入框,//根据条件查询 
//			Toast.makeText(getActivity(), "查询", 0).show();
			conditionQuery();//该方法开启了线程从web端加载数据
		break;
		} 
	}

	/**
	 * 当用户点击了场馆查询页面的查询按钮之后会调用此方法
	 */
	public void conditionQuery() {
		final String values=stadium_query_searchbox_content.getText().toString().trim();
		if(!TextUtils.isEmpty(values)){//判断用户在点击查询之前是否输入了参数 
			mProgressDialog=new ProgressDialog(getActivity());
			mProgressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
			mProgressDialog.setMessage("加载中...");
			mProgressDialog.setIndeterminate(true); 
			mProgressDialog.show();
			new Thread(){  
				public void run() {
					try {
//						JSONObject object=new JSONObject();
//						object.put("VenuesID", 0);
//						object.put("VenuesName", values); //这里百根据用户输入的场馆名称进行查询 
						sql.delete(0, sql.length());//清空StringBuilder 
						sql.append("vi.VenuesName like '%"+values+"%'");  //进行模糊条件查询
						Log.i("用户输入的查询条件是:",sql.toString());
						List<GetVenuesInfoBean> results=WebGetVenues.getGetVenuesData(sql.toString());
						if(results!=null){
							Message msg=new Message();
							msg.what=0x11;//标识正常获取到数据了
							msg.obj=results;
							mHandler.sendMessage(msg); 
							Log.i(TAG,"Web端线程加载数据结束,我已经发送数据到Handler了");
						}else{
							mHandler.sendEmptyMessage(0x22);//发送标识获取到的数据为空
						}
					} catch (Exception e) {  
						e.printStackTrace();
					}finally{
						mProgressDialog.dismiss();
					}
				};
			}.start();
		}
	}
	
	
	/** 给ListView进行填充数据,默认每页只显示10条数据 */
	private List<Map<String,Object>> getListViewData(){
		if(WebDataSet==null || WebDataSet.size() == 0){//如果WebDataSet数据集不为空，并且长度等于0就做用户提醒操作
//			Toast.makeText(getActivity(), "没有找到哦", 0).show();
		}else if(WebDataSet!=null && WebDataSet.size() > 0){//如果WebDataSet数据集不为空，并且长度大于0就做更新数据操作		
			/** 如果当前页数 小于 总页数,默认当前页从0开始增长,mTotalPage为数据总共分多少页*/
			if(current < mTotalPage){ 
				//参数1：i的值等于当前页乘以每页限制显示的条目数量,默认是10条
				//参数2： var的值等于
				int var=0;
				//如果数据长度在默认10条以内
				if(WebDataSetCount < 10){ var=WebDataSetCount; }
				else{ var = ((WebDataSetCount-(current*TEN))/TEN)>0 ? (current+1)*TEN : ((current+1)*TEN + WebDataSetCount%TEN)-TEN;}
				for (int i=current * TEN;i < var; i++) {
					Map<String,Object> map=new HashMap<String,Object>(); 
					map.put("VenuesImager", WebServiceUtils.IMAGE_URL+WebDataSet.get(i).getVenuesimage());//场馆图片,这里是图片的Uri路径，然后到ListView适配器当中进行异步加载获取到图片	
					map.put("VenuesName", WebDataSet.get(i).getVenuesname());//场馆名称
					map.put("Address", "地址："+WebDataSet.get(i).getAddress());//详细地址
					map.put("ReservePhone", "电话："+WebDataSet.get(i).getReservephone());//预定电话
					map.put("RideRoute", "路线："+WebDataSet.get(i).getRideroute());//乘车路线
					map.put("VenuesEnvironment", "所属环境："+WebDataSet.get(i).getVenuesenvironment());//场馆所属环境 
					mListViewData.add(map); 
				} 
				current++;//把当前页加1 
			} 
		}
		Log.i("当前的数据长度是:",mListViewData.size()+"");
		return mListViewData; 
	}
	
	/** 头部下拉刷新,暂未使用*/
	@Override
	public void onRefresh() { 
		
	}
	
	/**这个是ListView底部加载更多使用,这里使用到了Handler进行加载数据*/
	@Override
	public void onLoadMore() {
		mHandler.postDelayed(new Runnable(){ 
			@Override
			public void run() {
				if(current==mTotalPage || WebDataSetCount==0){
					mHandler.sendEmptyMessage(0x33);//发送已经没有新数据的标识
					Log.i(TAG,"在ListView当中我也向Handler发送消息过去了");
					onLoad();
					return;
				}
				getListViewData();//添加数据
				mStadiumQueryListViewAdapter.notifyDataSetChanged();//更新ListView适配器的数据
				onLoad(); 
			} 
		}, 2000);  
	}
	
	/** 停止ListView底部刷新 */
	private void onLoad() {
		stadium_query_listview.stopRefresh();
		stadium_query_listview.stopLoadMore();
		stadium_query_listview.setRefreshTime("刚刚");
		stadium_query_listview.invalidate();
	}
	
	@Override
	public void onDestroy() {
		stadium_query_searchbox_content.setText("");
		super.onDestroy();
	}
}
